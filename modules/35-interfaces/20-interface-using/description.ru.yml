---

name: Использование интерфейсов
theory: |

  Работа интерфейсов очень похожа на работу типов в TypeScript, однако есть и свои особенности.

  В том случае, если интерфейс необходимо расширить дополнительными полями после его инициализации, мы можем повторно объявить интерфейс с новыми свойствами - такой способ называется "слиянием деклараций":

  ```typescript
  interface IUser {
    rating: number;
  }

  const sergey: IUser = {
    nickname: 'Sergey',
    birthdate: 1990,
    rating: 1102,
  }
  ```

  Также мы можем расширить интерфейс с помощью создания другого интерфейса, который наследуется от него:

  ```typescript
  interface IStudent extends IUser {
    group: number;
  }

  const sergey: IStudent = {
    nickname: 'Sergey',
    birthdate: 1990,
    rating: 1102,
    group: 11,
  }
  ```

  Кроме того, интерфейсы могут расширять сразу несколько других интерфейсов:

  ```typescript
  interface IUser {
    nickname: string;
    rating: number;
  }

  interface IEditor {
    courses: [string];
    canEdit: boolean;
  }

  interface IAuthor extends IUser, IEditor {
    team: string;
  }

  const sergey: IAuthor = {
    nickname: 'Sergey',
    rating: 20,
    courses: ['typescript'],
    canEdit: true,
    team: 'Hexlet College'
  }
  ```

  Более того, тайпскрипт позволяет нам создавать перекрестные типы (intersection types) из нескольких интерфейсов c помощью литерала &:

  ```typescript
  interface IOneWay {
    one: string;
  }

  interface IOrAnother {
    another: string;
  }

  type OneWayOrAnother = IOneWay & IOrAnother;

  const example: OneWayOrAnother = {
    one: 'one',
    another: 'two',
  }
  ```

  Можно задаться вопросом, а есть ли какие-то существенные отличия между созданием перекрестных типов (intersections types) и расширением (extends) интерфейсов? Почти всегда данные действия будут взаимозаменяемыми, поэтому это скорее вопрос удобства. Тем не менее, существуют исключения, где [расширение интерфейса ведет себя не так как создание перекрестного типа](https://stackoverflow.com/questions/52681316/difference-between-extending-and-intersecting-interfaces-in-typescript).

  Может случиться так, что мы не знаем наперед всех свойств, которые будут содержаться в нашем интерфейсе, но нам известно их возможное содержание. В таком случае удобно использовать специальную индексную сигнатуру, которая позволяет описать типы возможных значений:

  ```typescript
  interface IPhoneBook {
    [index:string]: number;
  }

  const myNotePad: IPhoneBook = {
    ivan: 55531311,
    sergey: 55500110,
    mom: 55522111,
  }
  ```

  Таким образом, интерфейсы - это еще один мощный инструмент в TypeScript наряду с типами, который позволяет гибко описать наши данные. Интерфейс удобно поддается расширению и объединению с другими типами или интерфейсами.

instructions: |

  Вам даны несколько интерфейсов. На их основе создайте интерфейс ISuperman. ISuperMan должен иметь метод guessWho, возвращающий строку с указанным аргументом. Если в качестве строки к нам приходит любое значение кроме superman (в любом регистре), то следует вернуть предположение "It's a ${value}?", иначе "It's a ${value}!"

  ```typescript
  console.log(superMan.guessWho('bird')); // "It's a bird?";
  console.log(superMan.guessWho('plane')); "It's a plane?";
  console.log(superMan.guessWho('superman')); "It's a superman!";
  ```

tips:
  - |
    [Официальная документация](https://www.typescriptlang.org/docs/handbook/2/objects.html)
